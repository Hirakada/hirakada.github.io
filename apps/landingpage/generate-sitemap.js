import { createClient } from "@supabase/supabase-js";
import fs from 'fs';
import path from 'path';

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

async function generateSitemap() {
    const hostname = 'https://hirakada.com/'; 

    const staticRoutes = [
        '/',
        '/project',
        '/doc',
        '/journey',
    ];

    let projectSlugs = [];

    if (supabaseUrl && supabaseAnonKey) {
        try {
            const supabase = createClient(supabaseUrl, supabaseAnonKey);

            const { data: projectsData, error: projectsError } = await supabase
                .from('projects')
                .select('title');

            if (projectsError) {
                console.error("Error fetching projects for sitemap:", projectsError);
            } else if (projectsData) {
                const createSlug = (title) => {
                    return title
                        .toLowerCase()
                        .replace(/[^a-z0-9\s-]/g, '')
                        .replace(/\s+/g, '-')
                        .replace(/-+/g, '-');
                };
                projectSlugs = projectsData.map(project => `/project/${createSlug(project.title)}`);
            }
        } catch (e) {
            console.error("Failed to initialize Supabase or fetch data for sitemap:", e);
        }
    } else {
        console.warn("Supabase URL or ANON Key not provided. Dynamic sitemap routes will not be generated by script.");
    }

    const allRoutes = [...staticRoutes, ...projectSlugs];

    let sitemapXml = `<?xml version="1.0" encoding="UTF-8"?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`;

    const now = new Date().toISOString(); 

    allRoutes.forEach(route => {
        if (route === '/' && sitemapXml.includes('<loc>https://hirakada.com/</loc>')) {
            return; 
        }

        sitemapXml += `
    <url>
        <loc>${hostname}${route.startsWith('/') ? route.substring(1) : route}</loc>
        <lastmod>${now}</lastmod>
        <changefreq>daily</changefreq>
        <priority>0.7</priority>
    </url>`;
    });

    sitemapXml += `
</urlset>`;

    const sitemapPath = path.resolve(__dirname, '../dist/sitemap.xml');
    const distDir = path.dirname(sitemapPath);

    if (!fs.existsSync(distDir)) {
        fs.mkdirSync(distDir, { recursive: true });
    }

    fs.writeFileSync(sitemapPath, sitemapXml, 'utf8');
    console.log(`Sitemap generated at: ${sitemapPath}`);
}

generateSitemap().catch(console.error);